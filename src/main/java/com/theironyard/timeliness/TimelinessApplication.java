package com.theironyard.timeliness;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
import springfox.documentation.builders.ApiInfoBuilder;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spring.web.plugins.Docket;
import springfox.documentation.swagger2.annotations.EnableSwagger2;

import static springfox.documentation.builders.PathSelectors.regex;

@SpringBootApplication
@EnableSwagger2
public class TimelinessApplication {

	public static void main(String[] args) {
		SpringApplication.run(TimelinessApplication.class, args);
	}

	/**
	 * This will inspect your APIs and generate swagger docs on startup.  Go check them out at
	 * NOTE: You must login to the app with a valid user before viewing the API
	 * http://localhost:<port>/swagger-ui.html
	 *
	 * @return
	 */
	@Bean
	public Docket getFullApi() {
		return new Docket(DocumentationType.SWAGGER_2)
				.groupName("all-my-apis")
				.apiInfo(
						new ApiInfoBuilder()
								.title("Welcome to your new AutoGenerated Swagger Documentation")
								.description("This is your REST API experimenting headquarters!  \n" +
										"<p> Please use this live documentation to discover and play with this API. \n" +
										"\n" +
										"<p> If you've never used Swagger docs before... Swagger is live documentation that is generated at runtime start-up so it will always be up to date with the code.  Be sure to click around on them, there are expanding sections for each controller, and any POST/PUT methods generally have an 'Example Value' (on the right side) that you can click on to get started.\n" +
										"<p>Enjoy! Best Regards, Skipper.")
								.termsOfServiceUrl("http://www.urbandictionary.com/define.php?term=glhf")
								.license("Apache License Version 2.0")
								.licenseUrl("http://www.urbandictionary.com/define.php?term=glhf")
								.version("41.0")
								.build()
				)
				.select()
				.paths(regex("/api/*.*"))
				.build();
	}
}
